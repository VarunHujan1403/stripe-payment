{"ast":null,"code":"// server.js\nconst express=require('express');const bodyParser=require('body-parser');const mongoose=require('mongoose');const stripe=require('stripe')('sk_test_51PHSs2SCYZ0If31BLfi4ZsuCNemZkXSc0cOkRB6sdP1XdALz9JJQWOQ8uDTu0xjxiUMLzgGvXvxignSlNXZcmupu00cG74pKRO');// Replace with your actual Stripe secret key\nconst Transaction=require('./models/Transaction');const app=express();const PORT=process.env.PORT||5000;const MONGODB_URI='mongodb://localhost:27017/stripe_payments';// Change this to your MongoDB URI\nconst STRIPE_WEBHOOK_SECRET='your_webhook_secret';// Replace with your actual webhook secret\nmongoose.connect(MONGODB_URI,{useNewUrlParser:true,useUnifiedTopology:true}).then(()=>console.log('MongoDB connected')).catch(err=>console.error(err));app.use(bodyParser.json());// Endpoint to handle payments\napp.post('/api/transactions',async(req,res)=>{try{const{name,amount,transactionID}=req.body;const transaction=new Transaction({name,amount,transactionID});await transaction.save();res.status(201).json({message:'Transaction saved successfully'});}catch(err){console.error(err);res.status(500).json({error:'Internal server error'});}});// Endpoint to fetch transactions\napp.get('/api/transactions',async(req,res)=>{try{const transactions=await Transaction.find();res.json(transactions);}catch(error){console.error('Error fetching transactions:',error);res.status(500).json({error:'Internal server error'});}});// Webhook endpoint to handle Stripe events\napp.post('/webhook',bodyParser.raw({type:'application/json'}),async(req,res)=>{const sig=req.headers['stripe-signature'];let event;try{event=stripe.webhooks.constructEvent(req.body,sig,STRIPE_WEBHOOK_SECRET);}catch(err){console.error('Webhook signature verification failed.',err);return res.sendStatus(400);}// Handle the event based on its type\nswitch(event.type){case'payment_intent.succeeded':// Handle successful payment event\nconst paymentIntent=event.data.object;console.log('PaymentIntent was successful!',paymentIntent);// You can add code here to update your database or perform any other action\nbreak;case'payment_intent.payment_failed':// Handle failed payment event\nconst failedPaymentIntent=event.data.object;console.log('PaymentIntent failed:',failedPaymentIntent);// You can add code here to handle failed payments\nbreak;// Add more cases for other event types as needed\ndefault:console.log(\"Unhandled event type: \".concat(event.type));}// Return a 200 response to acknowledge receipt of the event\nres.sendStatus(200);});app.listen(PORT,()=>console.log(\"Server running on port \".concat(PORT)));","map":{"version":3,"names":["express","require","bodyParser","mongoose","stripe","Transaction","app","PORT","process","env","MONGODB_URI","STRIPE_WEBHOOK_SECRET","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","use","json","post","req","res","name","amount","transactionID","body","transaction","save","status","message","get","transactions","find","raw","type","sig","headers","event","webhooks","constructEvent","sendStatus","paymentIntent","data","object","failedPaymentIntent","concat","listen"],"sources":["C:/Users/VARUN ANSS/OneDrive/Desktop/Swio/frontend/src/ViewTransactions.js"],"sourcesContent":["// server.js\r\n\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst mongoose = require('mongoose');\r\nconst stripe = require('stripe')('sk_test_51PHSs2SCYZ0If31BLfi4ZsuCNemZkXSc0cOkRB6sdP1XdALz9JJQWOQ8uDTu0xjxiUMLzgGvXvxignSlNXZcmupu00cG74pKRO'); // Replace with your actual Stripe secret key\r\nconst Transaction = require('./models/Transaction');\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5000;\r\nconst MONGODB_URI = 'mongodb://localhost:27017/stripe_payments'; // Change this to your MongoDB URI\r\nconst STRIPE_WEBHOOK_SECRET = 'your_webhook_secret'; // Replace with your actual webhook secret\r\n\r\nmongoose.connect(MONGODB_URI, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true\r\n})\r\n  .then(() => console.log('MongoDB connected'))\r\n  .catch(err => console.error(err));\r\n\r\napp.use(bodyParser.json());\r\n\r\n// Endpoint to handle payments\r\napp.post('/api/transactions', async (req, res) => {\r\n  try {\r\n    const { name, amount, transactionID } = req.body;\r\n    const transaction = new Transaction({\r\n      name,\r\n      amount,\r\n      transactionID\r\n    });\r\n    await transaction.save();\r\n    res.status(201).json({ message: 'Transaction saved successfully' });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Endpoint to fetch transactions\r\napp.get('/api/transactions', async (req, res) => {\r\n  try {\r\n    const transactions = await Transaction.find();\r\n    res.json(transactions);\r\n  } catch (error) {\r\n    console.error('Error fetching transactions:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Webhook endpoint to handle Stripe events\r\napp.post('/webhook', bodyParser.raw({type: 'application/json'}), async (req, res) => {\r\n  const sig = req.headers['stripe-signature'];\r\n  let event;\r\n\r\n  try {\r\n    event = stripe.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);\r\n  } catch (err) {\r\n    console.error('Webhook signature verification failed.', err);\r\n    return res.sendStatus(400);\r\n  }\r\n\r\n  // Handle the event based on its type\r\n  switch (event.type) {\r\n    case 'payment_intent.succeeded':\r\n      // Handle successful payment event\r\n      const paymentIntent = event.data.object;\r\n      console.log('PaymentIntent was successful!', paymentIntent);\r\n      // You can add code here to update your database or perform any other action\r\n      break;\r\n    case 'payment_intent.payment_failed':\r\n      // Handle failed payment event\r\n      const failedPaymentIntent = event.data.object;\r\n      console.log('PaymentIntent failed:', failedPaymentIntent);\r\n      // You can add code here to handle failed payments\r\n      break;\r\n    // Add more cases for other event types as needed\r\n    default:\r\n      console.log(`Unhandled event type: ${event.type}`);\r\n  }\r\n\r\n  // Return a 200 response to acknowledge receipt of the event\r\n  res.sendStatus(200);\r\n});\r\n\r\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}