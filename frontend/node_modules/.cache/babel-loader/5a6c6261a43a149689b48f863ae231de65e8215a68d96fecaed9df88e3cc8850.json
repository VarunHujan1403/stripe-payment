{"ast":null,"code":"// server.js\n\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\nconst stripe = require('stripe')('sk_test_Your_Test_Key'); // Replace with your actual Stripe secret key\nconst Transaction = require('./models/Transaction');\nconst app = express();\nconst PORT = process.env.PORT || 5000;\nconst MONGODB_URI = 'mongodb://localhost:27017/stripe_payments'; // Change this to your MongoDB URI\nconst STRIPE_WEBHOOK_SECRET = 'your_webhook_secret'; // Replace with your actual webhook secret\n\nmongoose.connect(MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('MongoDB connected')).catch(err => console.error(err));\napp.use(bodyParser.json());\n\n// Endpoint to handle payments\napp.post('/api/transactions', async (req, res) => {\n  try {\n    const {\n      name,\n      amount,\n      transactionID\n    } = req.body;\n    const transaction = new Transaction({\n      name,\n      amount,\n      transactionID\n    });\n    await transaction.save();\n    res.status(201).json({\n      message: 'Transaction saved successfully'\n    });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({\n      error: 'Internal server error'\n    });\n  }\n});\n\n// Endpoint to fetch transactions\napp.get('/api/transactions', async (req, res) => {\n  try {\n    const transactions = await Transaction.find();\n    res.json(transactions);\n  } catch (error) {\n    console.error('Error fetching transactions:', error);\n    res.status(500).json({\n      error: 'Internal server error'\n    });\n  }\n});\n\n// Webhook endpoint to handle Stripe events\napp.post('/webhook', bodyParser.raw({\n  type: 'application/json'\n}), async (req, res) => {\n  const sig = req.headers['stripe-signature'];\n  let event;\n  try {\n    event = stripe.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);\n  } catch (err) {\n    console.error('Webhook signature verification failed.', err);\n    return res.sendStatus(400);\n  }\n\n  // Handle the event based on its type\n  switch (event.type) {\n    case 'payment_intent.succeeded':\n      // Handle successful payment event\n      const paymentIntent = event.data.object;\n      console.log('PaymentIntent was successful!', paymentIntent);\n      // You can add code here to update your database or perform any other action\n      break;\n    case 'payment_intent.payment_failed':\n      // Handle failed payment event\n      const failedPaymentIntent = event.data.object;\n      console.log('PaymentIntent failed:', failedPaymentIntent);\n      // You can add code here to handle failed payments\n      break;\n    // Add more cases for other event types as needed\n    default:\n      console.log(`Unhandled event type: ${event.type}`);\n  }\n\n  // Return a 200 response to acknowledge receipt of the event\n  res.sendStatus(200);\n});\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));","map":{"version":3,"names":["express","require","bodyParser","mongoose","stripe","Transaction","app","PORT","process","env","MONGODB_URI","STRIPE_WEBHOOK_SECRET","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","error","use","json","post","req","res","name","amount","transactionID","body","transaction","save","status","message","get","transactions","find","raw","type","sig","headers","event","webhooks","constructEvent","sendStatus","paymentIntent","data","object","failedPaymentIntent","listen"],"sources":["C:/Users/VARUN ANSS/OneDrive/Desktop/Swio/frontend/src/ViewTransactions.js"],"sourcesContent":["// server.js\r\n\r\nconst express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst mongoose = require('mongoose');\r\nconst stripe = require('stripe')('sk_test_Your_Test_Key'); // Replace with your actual Stripe secret key\r\nconst Transaction = require('./models/Transaction');\r\n\r\nconst app = express();\r\nconst PORT = process.env.PORT || 5000;\r\nconst MONGODB_URI = 'mongodb://localhost:27017/stripe_payments'; // Change this to your MongoDB URI\r\nconst STRIPE_WEBHOOK_SECRET = 'your_webhook_secret'; // Replace with your actual webhook secret\r\n\r\nmongoose.connect(MONGODB_URI, {\r\n  useNewUrlParser: true,\r\n  useUnifiedTopology: true\r\n})\r\n  .then(() => console.log('MongoDB connected'))\r\n  .catch(err => console.error(err));\r\n\r\napp.use(bodyParser.json());\r\n\r\n// Endpoint to handle payments\r\napp.post('/api/transactions', async (req, res) => {\r\n  try {\r\n    const { name, amount, transactionID } = req.body;\r\n    const transaction = new Transaction({\r\n      name,\r\n      amount,\r\n      transactionID\r\n    });\r\n    await transaction.save();\r\n    res.status(201).json({ message: 'Transaction saved successfully' });\r\n  } catch (err) {\r\n    console.error(err);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Endpoint to fetch transactions\r\napp.get('/api/transactions', async (req, res) => {\r\n  try {\r\n    const transactions = await Transaction.find();\r\n    res.json(transactions);\r\n  } catch (error) {\r\n    console.error('Error fetching transactions:', error);\r\n    res.status(500).json({ error: 'Internal server error' });\r\n  }\r\n});\r\n\r\n// Webhook endpoint to handle Stripe events\r\napp.post('/webhook', bodyParser.raw({type: 'application/json'}), async (req, res) => {\r\n  const sig = req.headers['stripe-signature'];\r\n  let event;\r\n\r\n  try {\r\n    event = stripe.webhooks.constructEvent(req.body, sig, STRIPE_WEBHOOK_SECRET);\r\n  } catch (err) {\r\n    console.error('Webhook signature verification failed.', err);\r\n    return res.sendStatus(400);\r\n  }\r\n\r\n  // Handle the event based on its type\r\n  switch (event.type) {\r\n    case 'payment_intent.succeeded':\r\n      // Handle successful payment event\r\n      const paymentIntent = event.data.object;\r\n      console.log('PaymentIntent was successful!', paymentIntent);\r\n      // You can add code here to update your database or perform any other action\r\n      break;\r\n    case 'payment_intent.payment_failed':\r\n      // Handle failed payment event\r\n      const failedPaymentIntent = event.data.object;\r\n      console.log('PaymentIntent failed:', failedPaymentIntent);\r\n      // You can add code here to handle failed payments\r\n      break;\r\n    // Add more cases for other event types as needed\r\n    default:\r\n      console.log(`Unhandled event type: ${event.type}`);\r\n  }\r\n\r\n  // Return a 200 response to acknowledge receipt of the event\r\n  res.sendStatus(200);\r\n});\r\n\r\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}